import{_ as i,c as s,f as a,o as t}from"./app-C49nKLGn.js";const l={};function n(r,e){return t(),s("div",null,e[0]||(e[0]=[a(`<h2 id="branch-分支规范" tabindex="-1"><a class="header-anchor" href="#branch-分支规范"><span>branch / 分支规范</span></a></h2><h3 id="分支命名" tabindex="-1"><a class="header-anchor" href="#分支命名"><span>分支命名</span></a></h3><ul><li>master / main 分支 master / main 为代码主分支，是用于直接部署到生产环境的分支，需要确保稳定。maintainer, developer均不可以直接在此分支上进行修改代码，push等操作。</li><li>develop 分支 develop 分支为开发分支，始终保持最新完成以及bug修复后的代码。只允许maintainer在此分支上进行直接修改代码，push等操作。</li><li>feature 分支 此分支为开发新功能时，以 develop 分支为基础创建的分支。 分支命名规则：以<code>feature/</code>开头，后接新功能的模块，如：<code>feature/cart</code>。</li><li>fix 分支 此分支为修复bug时创建的分支，命名规则与feature分支类似，在master/main分支或者develop分支代码出现bug需要修复时以其为基础创建。如果此bug在master/main分支与develop分支中都存在，则两个分支都需要合并创建的分支。</li></ul><h3 id="注意事项" tabindex="-1"><a class="header-anchor" href="#注意事项"><span>注意事项</span></a></h3><ul><li>每当要修改代码时，请以develop分支为基础创建分支。修改完成后一定要经过测试，再合并到develop分支，避免别人从develop分支拉下代码后报错。</li><li>本地的分支要多提交，分小功能提交，最好不要一次提交一大堆功能。</li><li>每天第一件事就是及时更新 develop 分支内容到本地分支。</li></ul><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 跳转到 develop 分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> develop</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 拉取远程代码库中develop分支最新的代码</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> pull</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 创建分支并直接跳转到此分支</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> checkout</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -b</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">feature/add-confirm-for-logout-button</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">## 修改代码, commit后push到远程代码库</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> push</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> --set-upstream</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> origin</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> feature/add-confirm-for-logout-button</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>之后就可以在网站上发起merge request来申请合并</p><h2 id="merge-分支合并规则" tabindex="-1"><a class="header-anchor" href="#merge-分支合并规则"><span>merge / 分支合并规则</span></a></h2><ul><li>在将分支推送到远程代码库时并发起mergel request时，如果此repo存在code viewer，需要@code viewer 进行代码审阅。</li><li>如果此次merge request由maintainer发起，可以直接合并进目标分支。如果是由developer发起，则需要maintainer来进行合并操作。</li><li>发起merge request时，请勾选squash commits以及delete source branch这二个选项来压缩commits和自动删除merge后残留的分支。</li></ul><h2 id="commit-提交规范" tabindex="-1"><a class="header-anchor" href="#commit-提交规范"><span>commit / 提交规范</span></a></h2><p>代码的 commit 使用<a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noopener noreferrer">conventional commits</a>规范，务必使用<a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/" target="_blank" rel="noopener noreferrer">conventional commits</a>规范中提到的<a href="https://www.conventionalcommits.org/zh-hans/v1.0.0/#%E7%94%A8%E4%BA%8E%E7%BA%A6%E5%AE%9A%E5%BC%8F%E6%8F%90%E4%BA%A4%E7%9A%84%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener noreferrer">工具</a>， 如 <a href="https://github.com/commitizen/cz-cli" target="_blank" rel="noopener noreferrer">cz-cli(node)</a> , <a href="https://github.com/tomasbjerre/git-changelog-lib" target="_blank" rel="noopener noreferrer">git-changelog-lib(java)</a>来优化 commit 效率, converntial commits 规范如下：</p><p>每次提交代码需要写commit messsage（提交信息）:</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> commit</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [commit </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">message]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>commit message 应该清晰明了，说明本次提交的目的。 可以将提交信息分为三个部分：</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>&lt;type&gt;/(&lt;scope&gt;):&lt;subject&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>例子：</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">docs(cli</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">): add screenshot of add-commit</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="type类型" tabindex="-1"><a class="header-anchor" href="#type类型"><span>type类型</span></a></h3><ul><li>feat: feature, 新功能</li><li>fix: bug的修复</li><li>docs: 文档相关的改动</li><li>style: 格式，如format了代码，增加空行等操作</li><li>refactor: 重构</li><li>test: 测试的改动</li><li>chore: 构建工具或者辅助工具的变动</li></ul><h3 id="scope" tabindex="-1"><a class="header-anchor" href="#scope"><span>scope</span></a></h3><p>说明本次commit改动的范围，如文件名，模块，路由等。</p><h3 id="subject" tabindex="-1"><a class="header-anchor" href="#subject"><span>subject</span></a></h3><p>概述本次的改动。</p><h2 id="tag-publish-标签及发布规范" tabindex="-1"><a class="header-anchor" href="#tag-publish-标签及发布规范"><span>TAG &amp; PUBLISH / 标签及发布规范</span></a></h2><p>给repo中的某个commit打上tag以表示重要性，一般使用tag功能来标记软件的发布节点或版本，如<code>v1.0.1</code>, <code>v0.9.1-beta</code> eg:</p><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">$</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> git</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> tag</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -a</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> v1.0.1</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -m</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">my version 1.0.1</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果打上的tag表示发布的版本，标签命名应遵守<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener noreferrer">semver</a>版本号命名规范。</p><h3 id="semver版本号命名规范" tabindex="-1"><a class="header-anchor" href="#semver版本号命名规范"><span>semver版本号命名规范</span></a></h3><p>软件的版本号命名分为三个部分：&lt;主版本号&gt;.&lt;次版本号&gt;.&lt;修订号&gt;，如<code>1.0.1</code>, <code>0.9.2</code>。 先行版本号可以加到后面作为延伸，如<code>1.0.1-alpha</code>, <code>1.1.2-rc.2</code>。 版本号递增规则：</p><ul><li>主版本号：当你做了不兼容的 API 修改，</li><li>次版本号：当你做了向下兼容的功能性新增，</li><li>修订号：当你做了向下兼容的问题修正。</li></ul><h4 id="先行版本号" tabindex="-1"><a class="header-anchor" href="#先行版本号"><span>先行版本号</span></a></h4><ul><li>alpha: 内部版本</li><li>beta: 测试版</li><li>rc: 即将作为正式版发布</li><li>release: 正式版本</li></ul><p>对于版本号相关的疑问，请参考<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noopener noreferrer">semver</a>的文档。</p>`,34)]))}const p=i(l,[["render",n],["__file","index.html.vue"]]),d=JSON.parse('{"path":"/article/6b417jjz/","title":"Git提交操作规范","lang":"zh-CN","frontmatter":{"title":"Git提交操作规范","createTime":"2020/02/21 16:43:47","permalink":"/article/6b417jjz/","tags":["git"],"description":"branch / 分支规范 分支命名 master / main 分支 master / main 为代码主分支，是用于直接部署到生产环境的分支，需要确保稳定。maintainer, developer均不可以直接在此分支上进行修改代码，push等操作。 develop 分支 develop 分支为开发分支，始终保持最新完成以及bug修复后的代码。只允...","head":[["meta",{"property":"og:url","content":"https://wantofun.cn/article/6b417jjz/"}],["meta",{"property":"og:site_name","content":"Want to Fun"}],["meta",{"property":"og:title","content":"Git提交操作规范"}],["meta",{"property":"og:description","content":"branch / 分支规范 分支命名 master / main 分支 master / main 为代码主分支，是用于直接部署到生产环境的分支，需要确保稳定。maintainer, developer均不可以直接在此分支上进行修改代码，push等操作。 develop 分支 develop 分支为开发分支，始终保持最新完成以及bug修复后的代码。只允..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-13T15:13:09.000Z"}],["meta",{"property":"article:tag","content":"git"}],["meta",{"property":"article:modified_time","content":"2024-11-13T15:13:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Git提交操作规范\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-13T15:13:09.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"branch / 分支规范","slug":"branch-分支规范","link":"#branch-分支规范","children":[{"level":3,"title":"分支命名","slug":"分支命名","link":"#分支命名","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]}]},{"level":2,"title":"merge / 分支合并规则","slug":"merge-分支合并规则","link":"#merge-分支合并规则","children":[]},{"level":2,"title":"commit / 提交规范","slug":"commit-提交规范","link":"#commit-提交规范","children":[{"level":3,"title":"type类型","slug":"type类型","link":"#type类型","children":[]},{"level":3,"title":"scope","slug":"scope","link":"#scope","children":[]},{"level":3,"title":"subject","slug":"subject","link":"#subject","children":[]}]},{"level":2,"title":"TAG & PUBLISH / 标签及发布规范","slug":"tag-publish-标签及发布规范","link":"#tag-publish-标签及发布规范","children":[{"level":3,"title":"semver版本号命名规范","slug":"semver版本号命名规范","link":"#semver版本号命名规范","children":[]}]}],"readingTime":{"minutes":3.63,"words":1089},"git":{"createdTime":1731510789000,"updatedTime":1731510789000,"contributors":[{"name":"fan","email":"yswfgo@qq.com","commits":1}]},"autoDesc":true,"filePathRelative":"代码开发/Git提交操作规范.md","categoryList":[{"id":"a3c49b","sort":10001,"name":"代码开发"}],"bulletin":false}');export{p as comp,d as data};
